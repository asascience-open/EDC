/*
 * DataFileClassLoader.java
 *
 * Created on October 2, 2007, 9:19 AM
 *
 * Applied Science Associates, Inc.
 * Copyright 2007.  All rights reserved.
 */

package com.asascience.edp.datafile.hydro;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Hashtable;

/**
 * Custom <CODE>ClassLoader</CODE> which finds & loads the
 * <CODE>DataFileBase</CODE> class representing the data file of interest.
 * 
 * @author CBM
 */
public class DataFileClassLoader extends ClassLoader {

	/**
	 * Creates a new instance of DataFileClassLoader
	 */
	public DataFileClassLoader() {
		super(DataFileClassLoader.class.getClassLoader());
	}

	/**
	 * Gets a new <CODE>ChemicalBase</CODE> object for the chemical specified.
	 * 
	 * @param className
	 *            <CODE>String</CODE> representing the class that is to be
	 *            returned.
	 * @return <CODE>ChemicalBase</CODE> class for the desired chemical.
	 * @throws java.lang.InstantiationException
	 *             Thrown if the instantiation of the loaded class is not
	 *             successful. Generated by the class.newInstance() call.
	 * @throws java.lang.IllegalAccessException
	 *             Thrown if the loaded class is not accessed successfully.
	 *             Generated by the class.newInstance() call.
	 */
	public DataFileBase getDataFileInstance(String className) throws InstantiationException, IllegalAccessException {
		Class c = findClass("com.asascience.edp.datafile.hydro." + className);
		return (DataFileBase) c.newInstance();
	}

	public DataFileBase getDataFileInstance(String packageName, String className) throws InstantiationException,
		IllegalAccessException {
		packageName = (packageName.endsWith(".")) ? packageName : packageName + ".";
		Class c = findClass(packageName + className);
		return (DataFileBase) c.newInstance();
	}

	/**
	 * 
	 * @param className
	 * @return
	 */
	@Override
	public Class findClass(String className) {
		byte classByte[];
		Class result = null;
		result = (Class) classes.get(className);
		if (result != null) {
			return result;
		}

		try {
			return findSystemClass(className);
		} catch (Exception e) {
		}
		try {
			String classPath = ((String) ClassLoader.getSystemResource(
				className.replace('.', File.separatorChar) + ".class").getFile()).substring(1);
			classByte = loadClassData(classPath);
			result = defineClass(className, classByte, 0, classByte.length, null);
			classes.put(className, result);
			return result;
		} catch (Exception e) {
			return null;
		}
	}

	private byte[] loadClassData(String className) throws IOException {
		File f;
		f = new File(className);
		int size = (int) f.length();
		byte buff[] = new byte[size];
		FileInputStream fis = new FileInputStream(f);
		DataInputStream dis = new DataInputStream(fis);
		dis.readFully(buff);
		dis.close();
		return buff;
	}

	private Hashtable classes = new Hashtable();
}
